# infrastructure/Dockerfile.frontend
# syntax=docker/dockerfile:1

ARG NODE_ENV=development
ARG APP_DIR=.

FROM node:18-alpine as builder
ARG APP_DIR
ARG NODE_ENV
ENV NODE_ENV=${NODE_ENV}
ENV CI=true
WORKDIR /app

# Copy dependency and config files
COPY ${APP_DIR}/package.json ./package.json
COPY ${APP_DIR}/tsconfig.json ./tsconfig.json
COPY ${APP_DIR}/tailwind.config.js ./tailwind.config.js
COPY ${APP_DIR}/postcss.config.js ./postcss.config.js

# Install dependencies in builder stage
RUN npm install && \
    npm install -g react-scripts

# In production, ensure no .env files are copied
RUN if [ "$NODE_ENV" = "production" ]; then \
      echo "*.env" > .dockerignore; \
    fi

# Copy source and public files
COPY ${APP_DIR}/src ./src
COPY ${APP_DIR}/public ./public

# In development, copy environment files
RUN if [ "$NODE_ENV" != "production" ]; then \
      cp -f ${APP_DIR}/.env* ./ 2>/dev/null || true; \
    fi

# Debug: Show what files we have
RUN echo "Contents of /app:" && \
    ls -la /app && \
    echo "\nContents of /app/src:" && \
    ls -la /app/src && \
    echo "\nContents of /app/public:" && \
    ls -la /app/public

# Build for production with better error handling
RUN echo "NODE_ENV is set to: $NODE_ENV" && \
    if [ "$NODE_ENV" = "production" ]; then \
      echo "Building for production..." && \
      export NODE_OPTIONS="--max_old_space_size=4096" && \
      npm run build || { echo "Build failed. Showing build output:"; cat /root/.npm/_logs/*-debug.log 2>/dev/null || true; exit 1; } && \
      echo "Build completed. Contents of /app:" && \
      ls -la /app && \
      echo "\nContents of /app/build:" && \
      ls -la /app/build || { echo "Build directory not found!"; exit 1; }; \
    else \
      echo "Development mode - skipping production build"; \
    fi

# Production stage: serve static files using nginx
FROM nginx:alpine as prod
# Copy built files from builder (react-scripts outputs to 'build')
COPY --from=builder /app/build /usr/share/nginx/html
# Set proper permissions
RUN chown -R nginx:nginx /usr/share/nginx/html && \
    chmod -R 755 /usr/share/nginx/html
# Add nginx configuration
COPY infrastructure/nginx.conf /etc/nginx/conf.d/default.conf
EXPOSE 8080
CMD ["nginx", "-g", "daemon off;"]

# Development stage: use Node.js to run the dev server
FROM node:18-alpine as dev
WORKDIR /app
COPY --from=builder /app ./
COPY --from=builder /usr/local/lib/node_modules/react-scripts /usr/local/lib/node_modules/react-scripts
RUN ln -s /usr/local/lib/node_modules/react-scripts/bin/react-scripts.js /usr/local/bin/react-scripts
EXPOSE 3001
ENV WDS_SOCKET_PORT=0
CMD ["npm", "start"] 